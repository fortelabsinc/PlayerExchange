name: Forte Player Exchange Develop Build

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: forte-player-exchange
  GKE_ZONE: us-central1-a
  IMAGE: plyxchg
  DEPLOYMENT: dev
  PLYXCHG_DB_HOST: ${{ secrets.PLYXCHG_DB_HOST }}
  PLYXCHG_APP_KEYS: ${{ secrets.PLYXCHG_APP_KEYS }}

jobs:
  build-application:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup elixir
        uses: actions/setup-elixir@v1
        with:
          elixir-version: 1.10.3 # Define the elixir version [required]
          otp-version: 22.3 # Define the OTP version [required]
      - name: Setup NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "13.x"
      - name: setup npm
        run: npm install

      - name: Build the gateway ui
        working-directory: src/apps/gateway/client
        run: |
          npm install
          npm run build

      # Grab the deps and compile them
      - name: Install Dependencies
        working-directory: src
        run: |
          mix deps.get
          mix deps.compile

      - name: Build the Project
        working-directory: src
        run: mix compile

      # Test are broken due to db requirement.
      # need to add a docker compile file that can setup local
      # dev for testing purposes

      #- name: Run Tests
      #  working-directory: src
      #  run: mix test

      - name: Build the Package
        working-directory: src
        run: MIX_ENV=prod mix release plyxchg

      - name: Copy Build folders
        working-directory: src/_build/prod/rel/
        run: tar -czvf plyxchg.tar.gz plyxchg

      - name: Move the tar file into the docker folders
        working-directory: src/_build/prod/rel/
        run: mv plyxchg.tar.gz ../../../docker/plyxchg

      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "270.0.0"
          #service_account_email: ${{ secrets.SA_EMAIL }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: forte-player-exchange

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker --quiet

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --quiet
          python3 -m pip install --upgrade pip
          python3 -m pip install ansible==2.9.2 requests docker openshift google-auth

      # Build the Rippler Docker image
      - name: Build rippler
        working-directory: rippler
        run: |
          export BUILD_VSN=$(cat ../src/vsn.txt) &&
          docker build -t gcr.io/$GKE_PROJECT/rippler-$DEPLOYMENT:$BUILD_VSN -t gcr.io/$GKE_PROJECT/rippler--$DEPLOYMENT:$GITHUB_SHA \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker Rippler image to Google Container Registry
      - name: Publish rippler
        working-directory: rippler
        run: |
          docker push gcr.io/$GKE_PROJECT/rippler-$DEPLOYMENT

      # Build the Ether Docker image
      - name: Build ether
        working-directory: ether
        run: |
          export BUILD_VSN=$(cat ../src/vsn.txt) &&
          docker build -t gcr.io/$GKE_PROJECT/ether-$DEPLOYMENT:$BUILD_VSN -t gcr.io/$GKE_PROJECT/ether-$DEPLOYMENT:$GITHUB_SHA \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker ether image to Google Container Registry
      - name: Publish ether
        working-directory: ether
        run: |
          docker push gcr.io/$GKE_PROJECT/ether-$DEPLOYMENT

      # Build the plyxchg Docker image
      - name: Build plyxchg
        working-directory: src/docker/plyxchg
        run: |
          export BUILD_VSN=$(cat ../../vsn.txt) &&
          docker build -t gcr.io/$GKE_PROJECT/plyxchg-$DEPLOYMENT:$BUILD_VSN -t gcr.io/$GKE_PROJECT/plyxchg-$DEPLOYMENT:$GITHUB_SHA \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker plyxchg image to Google Container Registry
      - name: Publish plyxchg
        working-directory: src/docker/plyxchg
        run: |
          docker push gcr.io/$GKE_PROJECT/plyxchg-$DEPLOYMENT
