---
- name: Manage Cockroach Public Service
  k8s:
    state: "{{cluster_state}}"
    wait: yes
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        # This service is meant to be used by clients of the database. It exposes a ClusterIP that will
        # automatically load balance connections to the different database pods.
        name: cockroachdb-public
        labels:
          app: cockroachdb
        namespace: "{{cluster_name}}-{{namespace}}"
      spec:
        ports:
          # The main port, served by gRPC, serves Postgres-flavor SQL, internode
          # traffic and the cli.
          - port: 26257
            targetPort: 26257
            name: grpc
          # The secondary port serves the UI as well as health and debug endpoints.
          - port: 8080
            targetPort: 8080
            name: http
        selector:
          app: cockroachdb

- name: Manage Cockroach Private Service
  k8s:
    state: "{{cluster_state}}"
    wait: yes
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        # This service only exists to create DNS entries for each pod in the stateful
        # set such that they can resolve each other's IP addresses. It does not
        # create a load-balanced ClusterIP and should not be used directly by clients
        # in most circumstances.
        name: cockroachdb
        labels:
          app: cockroachdb
        annotations:
          # Use this annotation in addition to the actual publishNotReadyAddresses
          # field below because the annotation will stop being respected soon but the
          # field is broken in some versions of Kubernetes:
          # https://github.com/kubernetes/kubernetes/issues/58662
          service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
          # Enable automatic monitoring of all instances when Prometheus is running in the cluster.
          prometheus.io/scrape: "true"
          prometheus.io/path: "_status/vars"
          prometheus.io/port: "8080"
        namespace: "{{cluster_name}}-{{namespace}}"
      spec:
        ports:
          - port: 26257
            targetPort: 26257
            name: grpc
          - port: 8080
            targetPort: 8080
            name: http
        # We want all pods in the StatefulSet to have their addresses published for
        # the sake of the other CockroachDB pods even before they're ready, since they
        # have to be able to talk to each other in order to become ready.
        publishNotReadyAddresses: true
        clusterIP: None
        selector:
          app: cockroachdb

- name: Define Pod Disruption Budget
  k8s:
    state: "{{cluster_state}}"
    wait: yes
    definition:
      apiVersion: policy/v1beta1
      kind: PodDisruptionBudget
      metadata:
        name: cockroachdb-budget
        namespace: "{{cluster_name}}-{{namespace}}"
        labels:
          app: cockroachdb
      spec:
        selector:
          matchLabels:
            app: cockroachdb
        maxUnavailable: 1

- name: Manage Cockroach Stateful Set
  k8s:
    state: "{{cluster_state}}"
    wait: yes
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: cockroachdb
        namespace: "{{cluster_name}}-{{namespace}}"
      spec:
        serviceName: "cockroachdb"
        replicas: 3
        selector:
          matchLabels:
            app: cockroachdb
        template:
          metadata:
            labels:
              app: cockroachdb
          spec:
            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 100
                    podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                          - key: app
                            operator: In
                            values:
                              - cockroachdb
                      topologyKey: kubernetes.io/hostname
            containers:
              - name: cockroachdb
                image: cockroachdb/cockroach:v19.2.6
                imagePullPolicy: IfNotPresent
                # TODO: Change these to appropriate values for the hardware that you're running. You can see
                # the amount of allocatable resources on each of your Kubernetes nodes by running:
                #   kubectl describe nodes
                # resources:
                #   requests:
                #     cpu: "16"
                #     memory: "8Gi"
                #   limits:
                # NOTE: Unless you have enabled the non-default Static CPU Management Policy
                # and are using an integer number of CPUs, we don't recommend setting a CPU limit.
                # See:
                #   https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/#static-policy
                #   https://github.com/kubernetes/kubernetes/issues/51135
                #   cpu: "16"
                #   memory: "8Gi"
                ports:
                  - containerPort: 26257
                    name: grpc
                  - containerPort: 8080
                    name: http
                livenessProbe:
                  httpGet:
                    path: "/health"
                    port: http
                  initialDelaySeconds: 30
                  periodSeconds: 5
                readinessProbe:
                  httpGet:
                    path: "/health?ready=1"
                    port: http
                  initialDelaySeconds: 10
                  periodSeconds: 5
                  failureThreshold: 2
                volumeMounts:
                  - name: datadir
                    mountPath: /cockroach/cockroach-data
                env:
                  - name: COCKROACH_CHANNEL
                    value: kubernetes-insecure
                command:
                  - "/bin/bash"
                  - "-ecx"
                  # The use of qualified `hostname -f` is crucial:
                  # Other nodes aren't able to look up the unqualified hostname.
                  - "exec /cockroach/cockroach start --logtostderr --insecure --advertise-host $(hostname -f) --http-addr 0.0.0.0 --join cockroachdb-0.cockroachdb,cockroachdb-1.cockroachdb,cockroachdb-2.cockroachdb --cache 25% --max-sql-memory 25%"
            # No pre-stop hook is required, a SIGTERM plus some time is all that's
            # needed for graceful shutdown of a node.
            terminationGracePeriodSeconds: 60
            volumes:
              - name: datadir
                persistentVolumeClaim:
                  claimName: datadir
        podManagementPolicy: Parallel
        updateStrategy:
          type: RollingUpdate
        volumeClaimTemplates:
          - metadata:
              name: datadir
            spec:
              accessModes:
                - "ReadWriteOnce"
              resources:
                requests:
                  storage: 10Gi

- name: Run Cockroach Init Service
  k8s:
    state: "{{cluster_state}}"
    wait: yes
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: cluster-init
        namespace: "{{cluster_name}}-{{namespace}}"
        labels:
          app: cockroachdb
      spec:
        template:
          spec:
            containers:
              - name: cluster-init
                image: cockroachdb/cockroach:v19.2.6
                imagePullPolicy: IfNotPresent
                command:
                  - "/cockroach/cockroach"
                  - "init"
                  - "--insecure"
                  - "--host=cockroachdb-0.cockroachdb"
            restartPolicy: OnFailure
  #when: "present is {{cluster_state}}"
