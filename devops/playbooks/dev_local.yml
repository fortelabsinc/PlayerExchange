---
#------------------------------------------------------------------------------
# This configuration is used to setup a local docker container for development.
# The goal here is to create a setup for running unit test as well as doing
# local dev work.
- hosts: localhost
  gather_facts: false
  vars:
    ansible_python_interpreter: "/usr/bin/python3"

  # Setup the state of the node.
  pre_tasks:
    - name: Validate that the `env_state` is set [Skip means it is set]
      debug:
        msg: "You must define a command line argument `env_state` to run this playbook"
      when: env_state is undefined

    - name: End execution if `env_state` is not set [Skip means it is set]
      meta: end_play
      when: env_state is undefined

    - name: Set the cluster action based on env_state [Skip means it is set]
      set_fact:
        action_class: "started"
        network_state: "present"
      when: env_state == 'start'

    - name: Set the cluster action based on env_state [Skip means it is set]
      set_fact:
        action_class: "absent"
        network_state: "absent"
      when: env_state == 'stop'

  # Running the tasks to setup the environments for all local testing, etc.
  tasks:
    - name: "{{ action_class }} the backend docker network"
      docker_network:
        name: backend
        state: "{{ network_state }}"

    - name: "{{ action_class }} manage the redis instance"
      docker_container:
        name: redis
        hostname: redis
        image: redis:6-alpine
        networks:
          - name: backend
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
        command: ["redis-server", "--appendonly", "yes"]
        ports:
          - "6379:6379"
        networks_cli_compatible: yes
        state: "{{ action_class }}"

    - name: "{{ action_class }} the cockroach 1 backend in docker"
      docker_container:
        name: cb_1
        hostname: cb_1
        image: cockroachdb/cockroach:latest
        networks:
          - name: backend
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
        command: start --insecure
        ports:
          - "26257:26257"
          #- "8080:8080"
        networks_cli_compatible: yes
        state: "{{ action_class }}"

    - name: Register the Cockroach container to the inventory
      add_host:
        hostname: "cb_1"
        ansible_connection: docker
        ansible_python_interpreter: /usr/bin/python3
      when: env_state != 'stop'

    - name: "{{ action_class }} the cockroach 2 backend in docker"
      docker_container:
        name: cb_2
        hostname: cb_2
        image: cockroachdb/cockroach:latest
        networks:
          - name: backend
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
        command: start --insecure --join=cb_1
        networks_cli_compatible: yes
        state: "{{ action_class }}"

    - name: "{{ action_class }} the cockroach 3 backend in docker"
      docker_container:
        name: cb_3
        hostname: cb_3
        image: cockroachdb/cockroach:latest
        networks:
          - name: backend
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
        command: start --insecure --join=cb_1
        networks_cli_compatible: yes
        state: "{{ action_class }}"

    - name: "{{ action_class }} the payID server in docker"
      docker_container:
        name: payid
        hostname: payid
        image: gcr.io/forte-player-exchange/payid:latest
        networks:
          - name: backend
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
        networks_cli_compatible: yes
        ports:
          - "8081:8081"
          - "8080:8080"
        state: "{{ action_class }}"

    - name: Run the migrations needed
      raw: >
        cd ../../src/apps/storage && mix ecto.create && mix ecto.migrate
      when: env_state == 'start'
